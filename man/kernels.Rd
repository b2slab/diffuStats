% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/kernels.R
\name{commuteTimeKernel}
\alias{commuteTimeKernel}
\alias{diffusionKernel}
\alias{inverseCosineKernel}
\alias{pStepKernel}
\alias{regularisedLaplacianKernel}
\title{Compute graph kernels}
\usage{
commuteTimeKernel(graph, normalized = FALSE)

diffusionKernel(graph, sigma2 = 1, normalized = TRUE)

inverseCosineKernel(graph)

pStepKernel(graph, a = 2, p = 5L)

regularisedLaplacianKernel(graph, sigma2 = 1, add_diag = 1,
    normalized = FALSE)
}
\arguments{
\item{graph}{igraph object}

\item{normalized}{logical, normalize Laplacian matrix?}

\item{sigma2}{numeric value, parameter \eqn{\sigma^2} of the kernel}

\item{a}{numeric value greater or equal to 2, which acts as a
regularisation term}

\item{p}{integer greater than 0, the number of steps for the random walk}

\item{add_diag}{numeric value or vector equalling \code{vcount(graph)},
constant term to regularise the spectrum of the Laplacian}
}
\value{
A kernel matrix with adequate dimnames
}
\description{
Function \code{commuteTimeKernel}
computes the conmute-time kernel,
which is the expected time of going back and forth
between a couple of nodes

Function \code{diffusionKernel}
computes the classical diffusion kernel
that involves matrix exponentiation. It has a "bandwidth" parameter
\eqn{\sigma^2}

Function \code{inverseCosineKernel}
computes the inverse cosine
kernel, which is based on a cosine transform on the spectrum of
the normalized Laplacian matrix

Function \code{pStepKernel}
computes the p-step random walk kernel

Function \code{regularisedLaplacianKernel} computes
the regularised Laplacian kernel, which is a standard in
biological networks. It allows to control the constant terms summed
to the diagonal
}
\examples{
data(graph_toy)
K_lap <- regularisedLaplacianKernel(graph_toy)
K_diff <- diffusionKernel(graph_toy)
K_pstep <- pStepKernel(graph_toy)
K_ct <- commuteTimeKernel(graph_toy)
K_ic <- inverseCosineKernel(graph_toy)
is_kernel(K_lap)
}
